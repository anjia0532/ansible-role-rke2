---

- name: Cordon and Drain the node {{ inventory_hostname }}
  ansible.builtin.shell: |
    set -o pipefail
    {{ rke2_data_path }}/bin/kubectl --kubeconfig /etc/rancher/rke2/rke2.yaml \
    cordon "{{ inventory_hostname }}" && \
    {{ rke2_data_path }}/bin/kubectl --kubeconfig /etc/rancher/rke2/rke2.yaml \
    drain "{{ inventory_hostname }}" --ignore-daemonsets --delete-local-data
  args:
    executable: /bin/bash
  register: drain
  until:
    - drain.stdout is search('drained')
  retries: 100
  delay: 15
  changed_when: false
  delegate_to: "{{ active_server | default(groups[rke2_servers_group_name].0) }}"
  run_once: true
  when: rke2_drain_node_during_upgrade

- name: Restart RKE2 service on {{ inventory_hostname }}
  ansible.builtin.service:
    name: "rke2-{{ rke2_type }}.service"
    state: restarted

- name: Wait for all nodes to be ready again
  ansible.builtin.shell: |
    set -o pipefail
    {{ rke2_data_path }}/bin/kubectl --kubeconfig /etc/rancher/rke2/rke2.yaml get nodes | grep " Ready" | wc -l
  args:
    executable: /bin/bash
  changed_when: false
  register: all_ready_nodes
  until:
    - groups[rke2_cluster_group_name] | length == all_ready_nodes.stdout | int
  retries: 100
  delay: 15
  delegate_to: "{{ active_server | default(groups[rke2_servers_group_name].0) }}"
  run_once: true

- name: Uncordon the node {{ inventory_hostname }}
  ansible.builtin.shell: |
    set -o pipefail
    {{ rke2_data_path }}/bin/kubectl --kubeconfig /etc/rancher/rke2/rke2.yaml \
    uncordon "{{ inventory_hostname }}"
  args:
    executable: /bin/bash
  changed_when: false
  delegate_to: "{{ active_server | default(groups[rke2_servers_group_name].0) }}"
  run_once: true
  when: rke2_drain_node_during_upgrade
